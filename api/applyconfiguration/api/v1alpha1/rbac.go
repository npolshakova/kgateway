// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// RBACApplyConfiguration represents a declarative configuration of the RBAC type for use
// with apply.
type RBACApplyConfiguration struct {
	Policy  *RBACPolicyApplyConfiguration          `json:"policies,omitempty"`
	Action  *apiv1alpha1.AuthorizationPolicyAction `json:"action,omitempty"`
	Disable *apiv1alpha1.PolicyDisable             `json:"disable,omitempty"`
}

// RBACApplyConfiguration constructs a declarative configuration of the RBAC type for use with
// apply.
func RBAC() *RBACApplyConfiguration {
	return &RBACApplyConfiguration{}
}

// WithPolicy sets the Policy field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Policy field is set to the value of the last call.
func (b *RBACApplyConfiguration) WithPolicy(value *RBACPolicyApplyConfiguration) *RBACApplyConfiguration {
	b.Policy = value
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *RBACApplyConfiguration) WithAction(value apiv1alpha1.AuthorizationPolicyAction) *RBACApplyConfiguration {
	b.Action = &value
	return b
}

// WithDisable sets the Disable field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Disable field is set to the value of the last call.
func (b *RBACApplyConfiguration) WithDisable(value apiv1alpha1.PolicyDisable) *RBACApplyConfiguration {
	b.Disable = &value
	return b
}
