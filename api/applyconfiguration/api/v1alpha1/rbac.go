// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// RbacApplyConfiguration represents a declarative configuration of the Rbac type for use
// with apply.
type RbacApplyConfiguration struct {
	Rules  []RbacRuleApplyConfiguration           `json:"rules,omitempty"`
	Action *apiv1alpha1.AuthorizationPolicyAction `json:"action,omitempty"`
}

// RbacApplyConfiguration constructs a declarative configuration of the Rbac type for use with
// apply.
func Rbac() *RbacApplyConfiguration {
	return &RbacApplyConfiguration{}
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *RbacApplyConfiguration) WithRules(values ...*RbacRuleApplyConfiguration) *RbacApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *RbacApplyConfiguration) WithAction(value apiv1alpha1.AuthorizationPolicyAction) *RbacApplyConfiguration {
	b.Action = &value
	return b
}
