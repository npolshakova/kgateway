// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// JWTPrincipalsApplyConfiguration represents a declarative configuration of the JWTPrincipals type for use
// with apply.
type JWTPrincipalsApplyConfiguration struct {
	RequiredClaims   []JWTClaimMatchApplyConfiguration `json:"requiredClaims,omitempty"`
	AllowedProviders []string                          `json:"allowedProviders,omitempty"`
}

// JWTPrincipalsApplyConfiguration constructs a declarative configuration of the JWTPrincipals type for use with
// apply.
func JWTPrincipals() *JWTPrincipalsApplyConfiguration {
	return &JWTPrincipalsApplyConfiguration{}
}

// WithRequiredClaims adds the given value to the RequiredClaims field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RequiredClaims field.
func (b *JWTPrincipalsApplyConfiguration) WithRequiredClaims(values ...*JWTClaimMatchApplyConfiguration) *JWTPrincipalsApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRequiredClaims")
		}
		b.RequiredClaims = append(b.RequiredClaims, *values[i])
	}
	return b
}

// WithAllowedProviders adds the given value to the AllowedProviders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the AllowedProviders field.
func (b *JWTPrincipalsApplyConfiguration) WithAllowedProviders(values ...string) *JWTPrincipalsApplyConfiguration {
	for i := range values {
		b.AllowedProviders = append(b.AllowedProviders, values[i])
	}
	return b
}
