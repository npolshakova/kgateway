// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// LLMBackendApplyConfiguration represents a declarative configuration of the LLMBackend type for use
// with apply.
type LLMBackendApplyConfiguration struct {
	LLMProvidersApplyConfiguration `json:",inline"`
	MultiPool                      *MultiPoolConfigApplyConfiguration `json:"multipool,omitempty"`
}

// LLMBackendApplyConfiguration constructs a declarative configuration of the LLMBackend type for use with
// apply.
func LLMBackend() *LLMBackendApplyConfiguration {
	return &LLMBackendApplyConfiguration{}
}

// WithOpenAI sets the OpenAI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the OpenAI field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithOpenAI(value *OpenAIConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.OpenAI = value
	return b
}

// WithAzureOpenAI sets the AzureOpenAI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the AzureOpenAI field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithAzureOpenAI(value *AzureOpenAIConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.AzureOpenAI = value
	return b
}

// WithAnthropic sets the Anthropic field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Anthropic field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithAnthropic(value *AnthropicConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.Anthropic = value
	return b
}

// WithGemini sets the Gemini field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Gemini field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithGemini(value *GeminiConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.Gemini = value
	return b
}

// WithVertexAI sets the VertexAI field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the VertexAI field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithVertexAI(value *VertexAIConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.VertexAI = value
	return b
}

// WithMistral sets the Mistral field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Mistral field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithMistral(value *MistralConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.Mistral = value
	return b
}

// WithMultiPool sets the MultiPool field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the MultiPool field is set to the value of the last call.
func (b *LLMBackendApplyConfiguration) WithMultiPool(value *MultiPoolConfigApplyConfiguration) *LLMBackendApplyConfiguration {
	b.MultiPool = value
	return b
}
