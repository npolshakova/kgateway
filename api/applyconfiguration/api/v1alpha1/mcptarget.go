// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// McpTargetApplyConfiguration represents a declarative configuration of the McpTarget type for use
// with apply.
type McpTargetApplyConfiguration struct {
	Name      *string                       `json:"name,omitempty"`
	Host      *string                       `json:"host,omitempty"`
	Port      *int32                        `json:"port,omitempty"`
	EnableTls *bool                         `json:"enableTls,omitempty"`
	Filters   []McpFilterApplyConfiguration `json:"filters,omitempty"`
}

// McpTargetApplyConfiguration constructs a declarative configuration of the McpTarget type for use with
// apply.
func McpTarget() *McpTargetApplyConfiguration {
	return &McpTargetApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *McpTargetApplyConfiguration) WithName(value string) *McpTargetApplyConfiguration {
	b.Name = &value
	return b
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *McpTargetApplyConfiguration) WithHost(value string) *McpTargetApplyConfiguration {
	b.Host = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *McpTargetApplyConfiguration) WithPort(value int32) *McpTargetApplyConfiguration {
	b.Port = &value
	return b
}

// WithEnableTls sets the EnableTls field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EnableTls field is set to the value of the last call.
func (b *McpTargetApplyConfiguration) WithEnableTls(value bool) *McpTargetApplyConfiguration {
	b.EnableTls = &value
	return b
}

// WithFilters adds the given value to the Filters field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Filters field.
func (b *McpTargetApplyConfiguration) WithFilters(values ...*McpFilterApplyConfiguration) *McpTargetApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithFilters")
		}
		b.Filters = append(b.Filters, *values[i])
	}
	return b
}
