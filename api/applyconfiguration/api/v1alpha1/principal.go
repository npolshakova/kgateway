// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// PrincipalApplyConfiguration represents a declarative configuration of the Principal type for use
// with apply.
type PrincipalApplyConfiguration struct {
	JWTPrincipals map[string]*apiv1alpha1.JWTPrincipal `json:"jwt,omitempty"`
}

// PrincipalApplyConfiguration constructs a declarative configuration of the Principal type for use with
// apply.
func Principal() *PrincipalApplyConfiguration {
	return &PrincipalApplyConfiguration{}
}

// WithJWTPrincipals puts the entries into the JWTPrincipals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the JWTPrincipals field,
// overwriting an existing map entries in JWTPrincipals field with the same key.
func (b *PrincipalApplyConfiguration) WithJWTPrincipals(entries map[string]*apiv1alpha1.JWTPrincipal) *PrincipalApplyConfiguration {
	if b.JWTPrincipals == nil && len(entries) > 0 {
		b.JWTPrincipals = make(map[string]*apiv1alpha1.JWTPrincipal, len(entries))
	}
	for k, v := range entries {
		b.JWTPrincipals[k] = v
	}
	return b
}
