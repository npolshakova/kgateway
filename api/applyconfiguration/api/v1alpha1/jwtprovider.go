// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// JWTProviderApplyConfiguration represents a declarative configuration of the JWTProvider type for use
// with apply.
type JWTProviderApplyConfiguration struct {
	Issuer         *string                           `json:"issuer,omitempty"`
	Audience       []string                          `json:"audience,omitempty"`
	TokenSource    *JWTTokenSourceApplyConfiguration `json:"tokenSource,omitempty"`
	ClaimToHeaders []*apiv1alpha1.JWTClaimToHeader   `json:"claimToHeaders,omitempty"`
	JWKS           *JWKSApplyConfiguration           `json:"jwks,omitempty"`
}

// JWTProviderApplyConfiguration constructs a declarative configuration of the JWTProvider type for use with
// apply.
func JWTProvider() *JWTProviderApplyConfiguration {
	return &JWTProviderApplyConfiguration{}
}

// WithIssuer sets the Issuer field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Issuer field is set to the value of the last call.
func (b *JWTProviderApplyConfiguration) WithIssuer(value string) *JWTProviderApplyConfiguration {
	b.Issuer = &value
	return b
}

// WithAudience adds the given value to the Audience field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Audience field.
func (b *JWTProviderApplyConfiguration) WithAudience(values ...string) *JWTProviderApplyConfiguration {
	for i := range values {
		b.Audience = append(b.Audience, values[i])
	}
	return b
}

// WithTokenSource sets the TokenSource field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the TokenSource field is set to the value of the last call.
func (b *JWTProviderApplyConfiguration) WithTokenSource(value *JWTTokenSourceApplyConfiguration) *JWTProviderApplyConfiguration {
	b.TokenSource = value
	return b
}

// WithClaimToHeaders adds the given value to the ClaimToHeaders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ClaimToHeaders field.
func (b *JWTProviderApplyConfiguration) WithClaimToHeaders(values ...**apiv1alpha1.JWTClaimToHeader) *JWTProviderApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithClaimToHeaders")
		}
		b.ClaimToHeaders = append(b.ClaimToHeaders, *values[i])
	}
	return b
}

// WithJWKS sets the JWKS field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the JWKS field is set to the value of the last call.
func (b *JWTProviderApplyConfiguration) WithJWKS(value *JWKSApplyConfiguration) *JWTProviderApplyConfiguration {
	b.JWKS = value
	return b
}
