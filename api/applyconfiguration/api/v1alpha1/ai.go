// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/api/v1alpha1"
)

// AIApplyConfiguration represents a declarative configuration of the AI type for use
// with apply.
type AIApplyConfiguration struct {
	PromptEnrichment *AIPromptEnrichmentApplyConfiguration `json:"prompt_enrichment,omitempty"`
	PromptGuard      *AIPromptGuardApplyConfiguration      `json:"prompt_guard,omitempty"`
	Defaults         []FieldDefaultApplyConfiguration      `json:"defaults,omitempty"`
	RouteType        *apiv1alpha1.RouteType                `json:"route_type,omitempty"`
}

// AIApplyConfiguration constructs a declarative configuration of the AI type for use with
// apply.
func AI() *AIApplyConfiguration {
	return &AIApplyConfiguration{}
}

// WithPromptEnrichment sets the PromptEnrichment field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptEnrichment field is set to the value of the last call.
func (b *AIApplyConfiguration) WithPromptEnrichment(value *AIPromptEnrichmentApplyConfiguration) *AIApplyConfiguration {
	b.PromptEnrichment = value
	return b
}

// WithPromptGuard sets the PromptGuard field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PromptGuard field is set to the value of the last call.
func (b *AIApplyConfiguration) WithPromptGuard(value *AIPromptGuardApplyConfiguration) *AIApplyConfiguration {
	b.PromptGuard = value
	return b
}

// WithDefaults adds the given value to the Defaults field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Defaults field.
func (b *AIApplyConfiguration) WithDefaults(values ...*FieldDefaultApplyConfiguration) *AIApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithDefaults")
		}
		b.Defaults = append(b.Defaults, *values[i])
	}
	return b
}

// WithRouteType sets the RouteType field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RouteType field is set to the value of the last call.
func (b *AIApplyConfiguration) WithRouteType(value apiv1alpha1.RouteType) *AIApplyConfiguration {
	b.RouteType = &value
	return b
}
