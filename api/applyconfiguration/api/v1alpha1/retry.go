// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	apisv1 "sigs.k8s.io/gateway-api/apis/v1"

	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// RetryApplyConfiguration represents a declarative configuration of the Retry type for use
// with apply.
type RetryApplyConfiguration struct {
	RetryOn             []apiv1alpha1.RetryOnCondition    `json:"retryOn,omitempty"`
	Attempts            *int32                            `json:"attempts,omitempty"`
	PerTryTimeout       *v1.Duration                      `json:"perTryTimeout,omitempty"`
	StatusCodes         []apisv1.HTTPRouteRetryStatusCode `json:"statusCodes,omitempty"`
	BackoffBaseInterval *v1.Duration                      `json:"backoffBaseInterval,omitempty"`
}

// RetryApplyConfiguration constructs a declarative configuration of the Retry type for use with
// apply.
func Retry() *RetryApplyConfiguration {
	return &RetryApplyConfiguration{}
}

// WithRetryOn adds the given value to the RetryOn field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the RetryOn field.
func (b *RetryApplyConfiguration) WithRetryOn(values ...apiv1alpha1.RetryOnCondition) *RetryApplyConfiguration {
	for i := range values {
		b.RetryOn = append(b.RetryOn, values[i])
	}
	return b
}

// WithAttempts sets the Attempts field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Attempts field is set to the value of the last call.
func (b *RetryApplyConfiguration) WithAttempts(value int32) *RetryApplyConfiguration {
	b.Attempts = &value
	return b
}

// WithPerTryTimeout sets the PerTryTimeout field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PerTryTimeout field is set to the value of the last call.
func (b *RetryApplyConfiguration) WithPerTryTimeout(value v1.Duration) *RetryApplyConfiguration {
	b.PerTryTimeout = &value
	return b
}

// WithStatusCodes adds the given value to the StatusCodes field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the StatusCodes field.
func (b *RetryApplyConfiguration) WithStatusCodes(values ...apisv1.HTTPRouteRetryStatusCode) *RetryApplyConfiguration {
	for i := range values {
		b.StatusCodes = append(b.StatusCodes, values[i])
	}
	return b
}

// WithBackoffBaseInterval sets the BackoffBaseInterval field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the BackoffBaseInterval field is set to the value of the last call.
func (b *RetryApplyConfiguration) WithBackoffBaseInterval(value v1.Duration) *RetryApplyConfiguration {
	b.BackoffBaseInterval = &value
	return b
}
