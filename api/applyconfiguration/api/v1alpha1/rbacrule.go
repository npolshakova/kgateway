// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RbacRuleApplyConfiguration represents a declarative configuration of the RbacRule type for use
// with apply.
type RbacRuleApplyConfiguration struct {
	Principal *PrincipalApplyConfiguration  `json:"principal,omitempty"`
	Access    *AccessRuleApplyConfiguration `json:"access,omitempty"`
}

// RbacRuleApplyConfiguration constructs a declarative configuration of the RbacRule type for use with
// apply.
func RbacRule() *RbacRuleApplyConfiguration {
	return &RbacRuleApplyConfiguration{}
}

// WithPrincipal sets the Principal field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Principal field is set to the value of the last call.
func (b *RbacRuleApplyConfiguration) WithPrincipal(value *PrincipalApplyConfiguration) *RbacRuleApplyConfiguration {
	b.Principal = value
	return b
}

// WithAccess sets the Access field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Access field is set to the value of the last call.
func (b *RbacRuleApplyConfiguration) WithAccess(value *AccessRuleApplyConfiguration) *RbacRuleApplyConfiguration {
	b.Access = value
	return b
}
