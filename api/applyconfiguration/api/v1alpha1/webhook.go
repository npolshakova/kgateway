// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// WebhookApplyConfiguration represents a declarative configuration of the Webhook type for use
// with apply.
type WebhookApplyConfiguration struct {
	Host           *string                         `json:"host,omitempty"`
	Port           *uint32                         `json:"port,omitempty"`
	ForwardHeaders []HeaderMatchApplyConfiguration `json:"forwardHeaders,omitempty"`
}

// WebhookApplyConfiguration constructs a declarative configuration of the Webhook type for use with
// apply.
func Webhook() *WebhookApplyConfiguration {
	return &WebhookApplyConfiguration{}
}

// WithHost sets the Host field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Host field is set to the value of the last call.
func (b *WebhookApplyConfiguration) WithHost(value string) *WebhookApplyConfiguration {
	b.Host = &value
	return b
}

// WithPort sets the Port field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Port field is set to the value of the last call.
func (b *WebhookApplyConfiguration) WithPort(value uint32) *WebhookApplyConfiguration {
	b.Port = &value
	return b
}

// WithForwardHeaders adds the given value to the ForwardHeaders field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the ForwardHeaders field.
func (b *WebhookApplyConfiguration) WithForwardHeaders(values ...*HeaderMatchApplyConfiguration) *WebhookApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithForwardHeaders")
		}
		b.ForwardHeaders = append(b.ForwardHeaders, *values[i])
	}
	return b
}
