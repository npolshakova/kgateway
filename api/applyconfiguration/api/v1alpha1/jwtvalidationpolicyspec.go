// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// JWTValidationPolicySpecApplyConfiguration represents a declarative configuration of the JWTValidationPolicySpec type for use
// with apply.
type JWTValidationPolicySpecApplyConfiguration struct {
	TargetRefs []LocalPolicyTargetReferenceApplyConfiguration `json:"targetRefs,omitempty"`
	Providers  map[string]*apiv1alpha1.JWTProvider            `json:"providers,omitempty"`
}

// JWTValidationPolicySpecApplyConfiguration constructs a declarative configuration of the JWTValidationPolicySpec type for use with
// apply.
func JWTValidationPolicySpec() *JWTValidationPolicySpecApplyConfiguration {
	return &JWTValidationPolicySpecApplyConfiguration{}
}

// WithTargetRefs adds the given value to the TargetRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TargetRefs field.
func (b *JWTValidationPolicySpecApplyConfiguration) WithTargetRefs(values ...*LocalPolicyTargetReferenceApplyConfiguration) *JWTValidationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargetRefs")
		}
		b.TargetRefs = append(b.TargetRefs, *values[i])
	}
	return b
}

// WithProviders puts the entries into the Providers field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Providers field,
// overwriting an existing map entries in Providers field with the same key.
func (b *JWTValidationPolicySpecApplyConfiguration) WithProviders(entries map[string]*apiv1alpha1.JWTProvider) *JWTValidationPolicySpecApplyConfiguration {
	if b.Providers == nil && len(entries) > 0 {
		b.Providers = make(map[string]*apiv1alpha1.JWTProvider, len(entries))
	}
	for k, v := range entries {
		b.Providers[k] = v
	}
	return b
}
