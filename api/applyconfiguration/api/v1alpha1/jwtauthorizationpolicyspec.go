// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	apiv1alpha1 "github.com/kgateway-dev/kgateway/v2/api/v1alpha1"
)

// JWTAuthorizationPolicySpecApplyConfiguration represents a declarative configuration of the JWTAuthorizationPolicySpec type for use
// with apply.
type JWTAuthorizationPolicySpecApplyConfiguration struct {
	TargetRefs []LocalPolicyTargetReferenceApplyConfiguration `json:"targetRefs,omitempty"`
	Principals []JWTPrincipalsApplyConfiguration              `json:"principals,omitempty"`
	Action     *apiv1alpha1.JWTAuthorizationPolicyAction      `json:"action,omitempty"`
}

// JWTAuthorizationPolicySpecApplyConfiguration constructs a declarative configuration of the JWTAuthorizationPolicySpec type for use with
// apply.
func JWTAuthorizationPolicySpec() *JWTAuthorizationPolicySpecApplyConfiguration {
	return &JWTAuthorizationPolicySpecApplyConfiguration{}
}

// WithTargetRefs adds the given value to the TargetRefs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TargetRefs field.
func (b *JWTAuthorizationPolicySpecApplyConfiguration) WithTargetRefs(values ...*LocalPolicyTargetReferenceApplyConfiguration) *JWTAuthorizationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargetRefs")
		}
		b.TargetRefs = append(b.TargetRefs, *values[i])
	}
	return b
}

// WithPrincipals adds the given value to the Principals field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Principals field.
func (b *JWTAuthorizationPolicySpecApplyConfiguration) WithPrincipals(values ...*JWTPrincipalsApplyConfiguration) *JWTAuthorizationPolicySpecApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithPrincipals")
		}
		b.Principals = append(b.Principals, *values[i])
	}
	return b
}

// WithAction sets the Action field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Action field is set to the value of the last call.
func (b *JWTAuthorizationPolicySpecApplyConfiguration) WithAction(value apiv1alpha1.JWTAuthorizationPolicyAction) *JWTAuthorizationPolicySpecApplyConfiguration {
	b.Action = &value
	return b
}
